// <auto-generated />
using System;
using BookingLikeApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookingLikeApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210528133850_Fix")]
    partial class Fix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookingLikeApp.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ApartmentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTimeEnds")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ArrivalTimeStarts")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Bolcked")
                        .HasColumnType("bit");

                    b.Property<bool>("Checked")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTimeEnds")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTimeStarts")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondAddressLine")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentTypeId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("BookingLikeApp.Models.ApartmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("HavePrice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("ApartmentService");
                });

            modelBuilder.Entity("BookingLikeApp.Models.ApartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApartmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Отель со множеством комнат и номеров",
                            Name = "Отель"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Частный дом обчно сожержит несколько квартир",
                            Name = "Дом"
                        });
                });

            modelBuilder.Entity("BookingLikeApp.Models.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Capacity")
                        .HasColumnType("decimal(1,0)");

                    b.Property<string>("Code")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 0m,
                            Code = "SNG",
                            Name = "Односпальная"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 0m,
                            Code = "DBL",
                            Name = "Двуспальная"
                        });
                });

            modelBuilder.Entity("BookingLikeApp.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Blocked = false,
                            CountryId = 1,
                            Name = "Москва"
                        });
                });

            modelBuilder.Entity("BookingLikeApp.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Blocked = false,
                            Name = "Россия"
                        });
                });

            modelBuilder.Entity("BookingLikeApp.Models.EntityReservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NumberEntityId")
                        .HasColumnType("int");

                    b.Property<int>("PackTenantId")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumberEntityId");

                    b.HasIndex("PackTenantId");

                    b.HasIndex("ReservationId");

                    b.ToTable("EntityReservations");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Number", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<bool>("Finish")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NumberTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("NumberTypeId");

                    b.ToTable("Numbers");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberBed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BedId")
                        .HasColumnType("int");

                    b.Property<int>("NumberId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BedId");

                    b.HasIndex("NumberId");

                    b.ToTable("NumberBeds");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<int>("NumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumberId");

                    b.ToTable("NumberEntities");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("HavePrice")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("NumberId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("NumberId");

                    b.ToTable("NumberServices");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Share")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NumberTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Одноместный номер",
                            Share = false
                        },
                        new
                        {
                            Id = 2,
                            Name = "Двухместный номер",
                            Share = false
                        },
                        new
                        {
                            Id = 3,
                            Name = "Общая комната",
                            Share = true
                        },
                        new
                        {
                            Id = 4,
                            Name = "Апартаменты",
                            Share = true
                        });
                });

            modelBuilder.Entity("BookingLikeApp.Models.Pack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Enable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumberId");

                    b.ToTable("Packs");
                });

            modelBuilder.Entity("BookingLikeApp.Models.PackService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NumberServiceId")
                        .HasColumnType("int");

                    b.Property<int>("PackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NumberServiceId");

                    b.HasIndex("PackId");

                    b.ToTable("PackServices");
                });

            modelBuilder.Entity("BookingLikeApp.Models.PackTenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Adults")
                        .HasColumnType("int");

                    b.Property<int>("Childrens")
                        .HasColumnType("int");

                    b.Property<bool>("Current")
                        .HasColumnType("bit");

                    b.Property<int>("PackId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.ToTable("PackTenants");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Registration", b =>
                {
                    b.Property<int>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("BasicInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("Numbers")
                        .HasColumnType("bit");

                    b.Property<bool>("Photos")
                        .HasColumnType("bit");

                    b.Property<bool>("Rules")
                        .HasColumnType("bit");

                    b.Property<bool>("Services")
                        .HasColumnType("bit");

                    b.HasKey("ApartmentId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AbortCancel")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("Cencel")
                        .HasColumnType("bit");

                    b.Property<bool>("Confirm")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("ReservationBegin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReservationEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasFilter("[TransactionId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Review", b =>
                {
                    b.Property<int>("ReservationId")
                        .HasColumnType("int");

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReservationId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BookingLikeApp.Models.ReviewScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.HasIndex("ScoreId");

                    b.ToTable("ReviewScores");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Score", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Scores");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InputUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OutputUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ReservationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("InputUserId");

                    b.HasIndex("OutputUserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("BookingLikeApp.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPasswordUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PFPUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RegistationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<decimal>("Wallet")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Apartment", b =>
                {
                    b.HasOne("BookingLikeApp.Models.ApartmentType", "ApartmentType")
                        .WithMany("Apartments")
                        .HasForeignKey("ApartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLikeApp.Models.City", "City")
                        .WithMany("Apartments")
                        .HasForeignKey("CityId");

                    b.HasOne("BookingLikeApp.Models.Country", "Country")
                        .WithMany("Apartments")
                        .HasForeignKey("CountryId");

                    b.HasOne("BookingLikeApp.Models.User", "User")
                        .WithMany("Apartments")
                        .HasForeignKey("UserId");

                    b.Navigation("ApartmentType");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingLikeApp.Models.ApartmentService", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Apartment", "Apartment")
                        .WithMany("ApartmentServices")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("BookingLikeApp.Models.City", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BookingLikeApp.Models.EntityReservation", b =>
                {
                    b.HasOne("BookingLikeApp.Models.NumberEntity", "NumberEntity")
                        .WithMany("EntityReservations")
                        .HasForeignKey("NumberEntityId");

                    b.HasOne("BookingLikeApp.Models.PackTenant", "PackTenant")
                        .WithMany()
                        .HasForeignKey("PackTenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLikeApp.Models.Reservation", "Reservation")
                        .WithMany("EntityReservations")
                        .HasForeignKey("ReservationId");

                    b.Navigation("NumberEntity");

                    b.Navigation("PackTenant");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Number", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Apartment", "Apartment")
                        .WithMany("Numbers")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLikeApp.Models.NumberType", "NumberType")
                        .WithMany("Numbers")
                        .HasForeignKey("NumberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("NumberType");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberBed", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Bed", "Bed")
                        .WithMany("NumberBeds")
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLikeApp.Models.Number", "Number")
                        .WithMany("NumberBeds")
                        .HasForeignKey("NumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Number");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberEntity", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Number", "Number")
                        .WithMany("NumberEntities")
                        .HasForeignKey("NumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Number");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberService", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Number", "Number")
                        .WithMany("NumberServices")
                        .HasForeignKey("NumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Number");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Pack", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Number", "Number")
                        .WithMany("Packs")
                        .HasForeignKey("NumberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Number");
                });

            modelBuilder.Entity("BookingLikeApp.Models.PackService", b =>
                {
                    b.HasOne("BookingLikeApp.Models.NumberService", "NumberService")
                        .WithMany("PackServices")
                        .HasForeignKey("NumberServiceId");

                    b.HasOne("BookingLikeApp.Models.Pack", "Pack")
                        .WithMany("PackServices")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NumberService");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("BookingLikeApp.Models.PackTenant", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Pack", "Pack")
                        .WithMany("PackTenants")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Photo", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Apartment", "Apartment")
                        .WithMany("Photos")
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Registration", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Apartment", "Apartment")
                        .WithOne("Registration")
                        .HasForeignKey("BookingLikeApp.Models.Registration", "ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Reservation", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Apartment", "Apartment")
                        .WithMany("Reservations")
                        .HasForeignKey("ApartmentId");

                    b.HasOne("BookingLikeApp.Models.Transaction", "Transaction")
                        .WithOne("Reservation")
                        .HasForeignKey("BookingLikeApp.Models.Reservation", "TransactionId");

                    b.HasOne("BookingLikeApp.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserId");

                    b.Navigation("Apartment");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Review", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Apartment", "Apartment")
                        .WithMany("Reviews")
                        .HasForeignKey("ApartmentId");

                    b.HasOne("BookingLikeApp.Models.Reservation", "Reservation")
                        .WithOne("Review")
                        .HasForeignKey("BookingLikeApp.Models.Review", "ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BookingLikeApp.Models.ReviewScore", b =>
                {
                    b.HasOne("BookingLikeApp.Models.Review", "Review")
                        .WithMany("ReviewScores")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLikeApp.Models.Score", "Score")
                        .WithMany("ReviewScores")
                        .HasForeignKey("ScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");

                    b.Navigation("Score");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Transaction", b =>
                {
                    b.HasOne("BookingLikeApp.Models.User", "InputUser")
                        .WithMany("InputTransactions")
                        .HasForeignKey("InputUserId");

                    b.HasOne("BookingLikeApp.Models.User", "OutputUser")
                        .WithMany("OutputTransactions")
                        .HasForeignKey("OutputUserId");

                    b.Navigation("InputUser");

                    b.Navigation("OutputUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BookingLikeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BookingLikeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingLikeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BookingLikeApp.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingLikeApp.Models.Apartment", b =>
                {
                    b.Navigation("ApartmentServices");

                    b.Navigation("Numbers");

                    b.Navigation("Photos");

                    b.Navigation("Registration");

                    b.Navigation("Reservations");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("BookingLikeApp.Models.ApartmentType", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Bed", b =>
                {
                    b.Navigation("NumberBeds");
                });

            modelBuilder.Entity("BookingLikeApp.Models.City", b =>
                {
                    b.Navigation("Apartments");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Country", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Number", b =>
                {
                    b.Navigation("NumberBeds");

                    b.Navigation("NumberEntities");

                    b.Navigation("NumberServices");

                    b.Navigation("Packs");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberEntity", b =>
                {
                    b.Navigation("EntityReservations");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberService", b =>
                {
                    b.Navigation("PackServices");
                });

            modelBuilder.Entity("BookingLikeApp.Models.NumberType", b =>
                {
                    b.Navigation("Numbers");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Pack", b =>
                {
                    b.Navigation("PackServices");

                    b.Navigation("PackTenants");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Reservation", b =>
                {
                    b.Navigation("EntityReservations");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Review", b =>
                {
                    b.Navigation("ReviewScores");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Score", b =>
                {
                    b.Navigation("ReviewScores");
                });

            modelBuilder.Entity("BookingLikeApp.Models.Transaction", b =>
                {
                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("BookingLikeApp.Models.User", b =>
                {
                    b.Navigation("Apartments");

                    b.Navigation("InputTransactions");

                    b.Navigation("OutputTransactions");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
